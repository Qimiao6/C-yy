#define _CRT_SECURE_NO_WARNINGS 1


//                   指针数组

//#include<stdio.h>
//int main()
//{
//	char* arr[4] = { "asfdsf","safds","dsgfgge","hgferg" };
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%c\n", *arr[i]);//指针只存了首元素地址
//		printf("%s\n", arr[i]);
//	}
//
//	return 0;
//}
//
//#include<stdio.h>
//int main()
//{
//    char p[] = { "djshfds" };
//    char s[] = { "hgfhd" };
//    char x[] = { "ilolio" };
//    char c[] = { "qwqads" };
//    char* pp[] = { p,s,x,c };//用char类型指针数组，存char类型数组数组首地址
//    	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//        printf("%c\n", *pp[i]);//指针存了数组的首元素地址
//
//		printf("%s\n", pp[i]);
//	}
//    return 0;
//}

///               指针数组模拟二维数组
//#include<stdio.h>
//int main()
//{
//	int i[] = { 1,2,3,4,5 };
//	int d[] = { 2,3,4,5,6 };
//    int v[] = { 3,4,5,6,7 };
//	int* pp[3] = { i,d,v };
//	int k = 0;
//	int c = 0;
//	for (k = 0; k < 3; k++)
//	{
//		for (c = 0; c < 5; c++)
//		{
//			printf("%d ",pp[k][c]);
//		}
//		printf("\n");
//	}
//	return 0;
//}

////                测试
//#include<stdio.h>
//int main()
//{
//	int i[] = { 1,2,3,4,5 };
//	int d[] = { 2,3,4,5,6 };
//	int v[] = { 3,4,5,6,7 };
//	int* pp[3] = { i,d,v };
//	//printf("%p ", pp[0]);//这是地址
//	//printf("%d", *(pp[0]+1));//       68/69效果一样
//	//printf("%d ", pp[1][1]);
//	printf("%d ", pp[0]);
//	return 0;
//}

///                  数组指针
//#include<stdio.h>
//int main()
//{
//	int i[5] = { 1,2,3,4,5};
//	char(*p)[5] = &i;//*p解引用，i，i的值是地址所以还需要解引用
//	for (int s = 0; s < 5; s++)
//	{
//		printf("%d", *(*p) + s);
//	}
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	char arr[5] = { "dfke" };
//	char(*p)[5] = &arr;
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		printf("%c", *(*p) + i);
//	}
//	return 0;
//}

//                   用函数打印数组
//
//#include<stdio.h>
////void print(int ss[10], int y)
//void print(int *ss, int y)
//{
//	int i = 0;
//	for (i = 0; i < y; i++)
//	{
//		//printf("%d ", ss[i]);
//		printf("%d ", *(ss+i));
//	}
//	printf("\n");
//}
//int main()
//{
//	int arr[10] = { 2,3,4,5,6,7 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	print(arr, sz);
//	return 0;
//}
//                              指针数组打印
//#include<stdio.h>
//#include<Windows.h>
//int main()
//{
//	char arr[5] = { "dfke" };
//	char(*p)[5] = &arr;
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		////printf("%c", *(*p + i) );//
//		//printf("%c", *(*p) + i);
//		printf("%c", (*p)[i]);//这个最简便
//		Sleep(1000);
//	}
//	return 0;
//}

////                   打印二维数组
//#include<stdio.h>
#include"sdd.h"
//int main()
//{
//	int arr[3][4] = { {1,2,3,4},{2,3,4,5},{3,4,5,6} };
//	//print1(arr, 3, 4);
//	print2(arr, 3, 4);
//	return 0;
//}
//void print2(int(*p)[4], int x, int y)//用数组指针接收
//{
//	int i = 0;
//	for (i = 0; i < x; i++)
//	{
//		int k = 0;
//		for (k = 0; k < y; k++)
//		{
//			/*printf("%d ", (*((*p) + i)) + k);*/
//			printf("%d ", (*((*p) + i)) + k);
//		}
//		printf("\n");
//	}
//}
//void print1(int arr[3][4], int x, int y)//用数组接收
//{
//	int i = 0;
//	for (i = 0; i < x; i++)
//	{
//		int h = 0;
//		for (h = 0; h < y; h++)
//		{
//			printf("%d ", arr[i][h]);//由首地址重新创建数组与源地址重合，值一致
//
//		}
//		printf("\n");
//		
//	}
//}

//               数组传参

//                   一维

#include<stdio.h>
//int main()
//{
//	int arr[10] = { 9,8,7,6,5,4,3,2,1,99 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int* arr2[20] = { arr };
//	//test(arr,sz);
//	//test2(arr, sz);
//	//test3(arr2, sz2);
//	//test4(arr2);
//	//test5(arr2);
//	test6(arr2);
//	return 0;
//}
void test6(int** arr)
{
	//printf("%d ", *(*arr+1));
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		//printf("%d ", *((*arr) + i));
		printf("%d ", *(*arr + i));
	}
}
void test5(int* arr[20])
{
	//printf("%d ", *(*arr+1));
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		//printf("%d ", *(*arr+i));
		printf("%d ", *(*arr + i));
	}
}
void test4(int* arr)
{
		printf("%d ", *arr);

}
void test3(int arr[20], int x)
{
	int i = 0;
	for (i = 0; i < x; i++)
	{
		printf("%d ", arr[i]);

	}
}
void test2(int arr[10], int x)
{
	int i = 0;
	for (i = 0; i < x; i++)
	{
		printf("%d ", arr[i]);

	}
}
void test(int arr[],int x)
{
	int i = 0;
	for (i = 0; i < x; i++)
	{
		printf("%d ", arr[i]);
		
	}
}
//                二维数组传参
//#include<stdio.h>
//int main()
//{
//	int arr[3][5] = { {1,2,3,4,5},{5,4,3,2,1},{6,7,8,9,10} };
//	//huu(arr);
//	//huu2(arr);
//	huu3(arr);
//
//	return 0;
//}
void huu3(int (*arr)[5])
{
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		int e = 0;
		for (e = 0; e < 5; e++)
		{
			printf("%d ", arr[i][e]);

		}
		printf("\n");
	}
}
void huu2(int arr[][5])
{
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		int e = 0;
		for (e = 0; e < 5; e++)
		{
			printf("%d ", arr[i][e]);

		}
		printf("\n");
	}
}
void huu(int arr[3][5])
{
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		int e = 0;
		for (e = 0; e < 5; e++)
		{
			printf("%d ", arr[i][e]);

		}
		printf("\n");
	}
}
#include<stdio.h>
int main()
{
	;
}
