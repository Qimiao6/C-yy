#define _CRT_SECURE_NO_WARNINGS 1
//               动态内存开辟常见错误
//#include<stdio.h>
//#include<stdlib.h>
//int main()
//{
//	int i = 0;
//	int* p = (int*)malloc(sizeof(int) * 10);
//	if (p == NULL)//如果malloc开辟失败返回空指针
//	{
//		perror("malloc");
//		return 0;
//	}
//	for (i = 0; i < 50; i++)
//	{
//		//*(p + i) = i;//发生越界时，无警告, 但释放内存时会出现BUG
//		//printf("%d ", *(p + i));
//		p[i] = i;//有警告出现，便于调试
//		printf("%d ", p[i]);
//	}
//	free(p);//使用完后把内存释放掉
//	p = NULL;
//	return 0;
//}

//     不能对非动态开辟的空间进行释放
//#include<stdio.h>
//#include<stdlib.h>
//#include<string.h>
//int main()
//{
//	int i = 0;
//	int* p = &i;
//	free(p);//      程序会直接崩溃
//	////p = NULL;
//	return 0;
//}

//           不能只释放动态内存的一部分，一定要用头指针释放

//int main()
//{
//	int i = 0;
//		int* p = (int*)malloc(sizeof(int) * 10);
//		if (p == NULL)//如果malloc开辟失败返回空指针
//		{
//			perror("malloc");
//			return 0;
//		}
//		for (i = 0; i < 9; i++)
//		{
//			*p = i;//越界时有警告出现，便于调试
//			printf("%d ", *p);
//			p++;
//		}
//			free(p);//由于p不是动态内存起始地址，程序会崩溃
//			p = NULL;
//			return 0;
//}


//int* ptr()//注意次函数返回的时动态内存，用完一定要释放内存
//{
//	int* p = (int*)malloc(sizeof(int) * 10);
//	return p;
//}
//int main()
//{
//	int i = 9;
//	int* pp = ptr();//接收开辟的内存
//	*pp = 10;
//	free(pp);//释放pp所指向的空间
//	pp = NULL;
//	return 0;
//}

//                下面是问题代码

//void GetMemory(char* p)//这里的p只是str的拷贝
//{
//	p = (char*)malloc(100);//改变的只是p,并没有改变str的指向
//	//没判断是否为空指针
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(str);//str还空指针
//	strcpy(str, "hello world");//空指针不能解引用
//	printf(str);
//	//程序结束后没有释放内存，会导致内存泄漏
//	//并且内存已经丢了，因为没有p的地址
//}
//int main()
//{
//	Test();
//	return 0;
//}

//         把上面改对

//void GetMemory(char** p)
//{
//	*p = (char*)malloc(100);
//	
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(&str);
//	strcpy(str, "hello world");
//	printf(str);
//	free(str);//释放
//	str = NULL;//置控
//}
//int main()
//{
//	Test();
//	return 0;
//}

////        或者
//
//char* GetMemory(char* p)
//{
//	p = (char*)malloc(100);
//	if (p == NULL)
//	{
//		perror("malloc");
//	}
//	return p;
//}
//void Test(void)
//{
//	char* str = NULL;
//	str = GetMemory(str);
//	strcpy(str, "hello world");
//	printf(str);
//	free(str);//释放
//	str = NULL;//置控
//}
//int main()
//{
//	Test();
//	return 0;
//}
//                下面是问题代码

//char* GetMemory(void)
//{
//	char p[] = "hello world";
//	return p;
//}
//void Test(void)
//{
//	char* str = NULL;
//	str = GetMemory();//由于函数结束传回来的地址已经被释放。
//	printf(str);
//}
//int main()
//{
//	Test();
//	return 0;
//}


//               下列函数造成非法访问
//void Test(void)
//{
//	char* str = (char*)malloc(100);
//	strcpy(str, "hello");
//	free(str);
//	if (str != NULL)//str所指向的地址已经被释放了，已经没有操作权限了
//	{
//		strcpy(str, "world");//所以导致这里非法访问
//		printf(str);
//	}
//}
//int main()
//{
//	Test();
//	return 0;
//}


//
//#define MAX_SIZE 5
//struct _Record_Struct
//{
//	unsigned char Env_Alarm_ID : 4;
//	unsigned char Para1 : 2;
//	unsigned char state;
//	unsigned char avail : 1;
//}*Env_Alarm_Record;
//void main()
//{
//	struct _Record_Struct* pointer = (struct _Record_Struct*)malloc(sizeof(struct _Record_Struct) * MAX_SIZE);
//	printf("%d", sizeof(struct _Record_Struct));
//}

//int main()
//{
//    unsigned char puc[4];
//    struct tagPIM
//    {
//        unsigned char ucPim1;
//        unsigned char ucData0 : 1;
//        unsigned char ucData1 : 2;
//        unsigned char ucData2 : 3;
//    }*pstPimData;
//    pstPimData = (struct tagPIM*)puc;
//    memset(puc, 0, 4);
//    pstPimData->ucPim1 = 2;//   字节0 2
//    pstPimData->ucData0 = 3;//1
//    pstPimData->ucData1 = 4;//001
//    pstPimData->ucData2 = 5;//10 1001//2 9
//    printf("%02x %02x %02x %02x\n", puc[0], puc[1], puc[2], puc[3]);
//    return 0;
//}

//#include <stdio.h>
//enum ENUM_A
//{
//	X1,
//	Y1,
//	Z1 = 255,
//	A1,
//	B1,
//};
//int main()
//{
//	enum ENUM_A enumA = Y1;
//	enum ENUM_A enumB = B1;
//	printf("%d %d\n", enumA, enumB);//1，257
//
//}
///                      存储情况
//#include<stdio.h>
//int main()
//{
//    union
//    {
//        short k;
//        char i[2];
//    }*s, a;
//    s = &a;
//    s->i[0] = 0x39;
//    s->i[1] = 0x38;//低位
//    printf(" % x\n", a.k);//3839
//    return 0;
//}


// 一个数组中只有两个数字是出现一次，其他所有数字都出现了两次，编写一个函数找出这两个只出现一次的数字。
//


//       模拟实现strncpy
//#include<stdio.h>
//void my_strncpy(char* p1, char* p2, size_t num)
//{
//	while ( num--)
//	{
//		*p1++ = *p2++;
//	}
//}
//int main()
//{
//	char str1[15] = "xxxxxxx";
//	char str2[15] = "aaaaaaa";
//	my_strncpy(str1, str2,3);
//	printf("%s", str1);
//	return 0;
//}

//         模拟实现字符串追加strncat
#include<stdio.h>
#include<stdio.h>
void my_strncat(char* p1, char* p2, size_t num)
{
	while (*p1)
	{
		p1++;
	}
	while (num--)
	{
		*p1++ = *p2++;
	}
	*p1 = '\0';
}
int main()
{
	char str1[15] = "xxxxxxx";
	char str2[15] = "aaaaaaa";
	my_strncat(str1, str2,3);
	printf("%s", str1);
	return 0;
}
