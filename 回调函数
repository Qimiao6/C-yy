#define _CRT_SECURE_NO_WARNINGS 1


//              函数指针（存放函数的指针）
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//int add(int a, int b)
//{
//	return a + b;
//}
//int main()
//{
//	printf("%p\n", &add);//取不取地址，地址都一样，他不像数组有位，所以判断函数 &add，add一样；
//	printf("%p\n", add);//函数名就是函数的地址
//	int(*p)(int a, int b) =add;//括号把*p扩起来是声明p是指针，带俩值(int , int )，函数类型是int;
//	
//	printf("%d\n", (*p)(3, 4));//调用成功,p就是add地址，解引用可以得到add;
//	printf("%d", p(3, 4)); //不解引用也调用成功，因为add本身就是地址，地址也是add赋值给p的
//                          	// 但解引用易让大家理解
//	return 0;
//}
//
//int main()
//{
//	//0 - int
//	//( void (*)() )0 - 把0当做一个函数的地址
//	//
//	//( *( void (*)() )0 )();
//	//
//	//把0直接转换成一个void (*)()的函数指针，然后去调用0地址处的函数
//	//int float
//	void(*signal(int, void(*)(int)))(int);
//	//
//	//上述代码是一次函数声明
//	//声明的函数叫：signal
//	//signal函数的第一个参数是int类型的
//	//signal函数的第二个参数是一个函数指针类型，该函数指针指向的函数参数是int，返回类型是void
//	//signal函数的返回类型也是一个函数指针类型，该函数指针指向的函数参数是int，返回类型是void
//	//void (*)(int) signal(int, void(*)(int)); //err
//
//	typedef void(*pf_t)(int) ;//把void(*)(int)函数类型定义为pf_t;
//	pf_t signal( int, pf_t);//用了pf_t后和31行一样，但简化也易读了
//
//	
//
//	return 0;
//}


//  用函数指针数组完成加减乘除
//#include<stdio.h>
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}
//int mul(int x, int y)
//{
//	return x * y;
//}
//int div(int x, int y)
//{
//	return x / y;
//}
//int main()
//{
//	int(*pp[5])(int, int) = { 0,add,sub,mul,div };
//	int ent = 0;
//	int y = 0;
//	int a = 0;
//	int b = 0;
//	do
//	{
//		printf("*********1  add, 2  sub **********\n");
//		printf("*********3  mul, 4  div **********\n");
//		printf("请输入：\n");
//		scanf("%d", &y);
//		if (y == 0)
//		{
//			printf("退出\n");
//			break;
//		}
//		if (y > 4)
//		{
//			printf("输入错误\n");
//		}
//		else
//		{
//			printf("请输入两个值：\n");
//			scanf("%d %d", &a, &b);
//			ent = (pp[y])(a, b);
//			printf("%d\n", ent);
//		}
//
//	} while (y);
//	return 0;
//}
////////////////        函数指针及回调函数         \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//int add(int x, int y)
//{
//	return x + y;
//}
//void  ccd(int(*pp)(int, int))
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d %d", &a, &b);
//	int ret = pp(a, b);
//	printf("%d ", ret);
//
//}
//int main()
//{
//	
//	//int(*pp)(int, int) = add;//括号把*p扩起来是声明p是指针，带俩值(int , int )，函数返回类型是int;
//	//printf("%d",pp(a, b));
//	ccd(add);
//	return 0;
//}
//                         回调函数实现简易计算机
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}
//int mul(int x, int y)
//{
//	return x * y;
//}
//int div(int x, int y)
//{
//	return x / y;
//}
//void ccl(int(*p)(int, int))
//{
//	int a = 0;
//	int b = 0;
//	printf("请输入两个值:\n");
//	scanf("%d %d", &a, &b);
//	int ret = p(a,b);
//	printf("%d", ret);
//}
//int main()
//{
//	int (*pp[5])(int, int) = { 0,add,sub,mul,div };
//	int i = 0;
//	
//	printf("********     1 加法   2 减法      ***********\n");
//	printf("********     1 乘法   2 除法      ***********\n");
//	printf("请输入要输入的运算:>\n");
//	scanf("%d", &i);
//	ccl(pp[i]);
//}

//                        冒泡排序

//void mp(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz - 1; i++)
//	{
//		int y = 0;
//		for (y = 0; y < sz - 1 - i; y++)
//		{
//			if (arr[y] > arr[y + 1])
//			{
//				int rr = arr[y];
//				arr[y] = arr[y + 1];
//				arr[y + 1] = rr;
//			}
//		}
//	}
//}
//void print(int arr[], int v)
//{
//	int i = 0;
//	for (i = 0; i < v; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//}
//int main()
//{
//	int i[10] = { 2,6,3,9,7,4,1,8,0,5 };
//	int sz = sizeof(i) / sizeof(i[0]);
//	mp(i, sz);
//	print(i, sz);
//	return 0;
//}
///                   qsort排序int的使用

void print(int arr[], int v)//打印函数
{
	int i = 0;
	for (i = 0; i < v; i++)
	{
		printf("%d ", arr[i]);
	}
}
////int cmp_int(const void* e1, const void* e2)//指向比较两个元素的函数的指针。
//////此函数通过反复调用以比较两个元素。它应遵循以下原型：
//////int compar (const void* p1, const void* p2);
////{
////	if (*(int*)e1 > *(int*)e2)
////		return 1;
////	else if (*(int*)e1 < *(int*)e2)
////		return -1;
////	else
////		return 0;
////}
int cmp_int1(const void* e1, const void* e2)//指向比较两个元素的函数的指针。
//此函数通过反复调用以比较两个元素。它应遵循以下原型：
//int compar (const void* p1, const void* p2);
{
	return  (*(int*)e1 - *(int*)e2);
	//应遵守需调换返回>0
	//相等等于0
	//无需调换<0
	//注意e1,e2位置
		
}
////int main()
//{
//	int i[] = { 2,6,7,4,5,9,1,8,3 };
//	int sz = sizeof(i) / sizeof(0);
//	qsort(i, sz, sizeof(i[2]), /*cmp_int*/cmp_int1);
//	print(i, sz);
//	test3();
//	return 0;
//}

///                   qsort排序int的使用


struct ss
{
	char mz[20];
	int nl;
};
int ss2(const void* b, const void* b1)
{
	return strcmp(((struct ss*)b)->mz , ((struct ss*)b1)->mz);
}
int ss1(const void* b, const void* b1)
{
	return ((struct ss*)b)->nl - ((struct ss*)b1)->nl;
}
void test3()
{
	int ret = 0;
	struct ss d[] = { {"sjshf",22},{"jsdfhjsd",40},{"sjdas",18} };
	ret = sizeof(d) / sizeof(d[0]);
	qsort(d, ret, sizeof(d[0]), ss1);
	//qsort(d, ret, sizeof(d[0]), ss2);

}

int main()
{
	test3();
	return 0;
}
//                   任意元素排序
void mp(void* cc, int sz,int size,int(*cmp)(const void* e1, const void* e2))
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int y = 0;
		for (y = 0; y < sz - 1 - i; y++)
		{
			if (arr[y] > arr[y + 1])
			{
				int rr = arr[y];
				arr[y] = arr[y + 1];
				arr[y + 1] = rr;
			}
		}
	}
}
