#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//                        浮点数如何存
////以5.5为例
//int main()
//{
//	float i = 5.5;
//	//  S = 0;
//	//  M = 1.011（第一位会被省略）
//	//  E = 129（127+2）（加中位数才能存进去）
////标准// (-1)^0 * 1.011 * 2^2
//// 内存：  0 1000 0001 01100000000000000000000
////         S     E      M  后面补0
////         01000000 10110000 00000000 00000000	//小端存储
//	//       40      b0       00          00
//	return 0;
//}

//           大小端存储自动判断

//#include<stdio.h>
//int main()
//{
//	int i = 1;
//	//00000000 00000000 00000000 00000001
//	//   00        00       00      01
//	char* p = (char*)&i;
//	if (*p)//*p==1?
//		printf("小端存储");
//	else
//		printf("大端存储");
//	return 0;
//}

//                            测试
//#include<stdio.h>
//int main()
//{
//	char* p = "hello bit";//p存储的是h的地址
//	return 0;
//}

//                              指针
//#include<stdio.h>
//int main()
//{
//	char i = 'w';
//	char* p = &i;//*表示p是指针变量，char表示p存储的是char类型的地址，&i把i的地址取出来存到p中；
//	char* ps = "afsjdh";//和数组一样，存的是字符串首地址
//	//*ps = 'h';//常量字符串不能修改
//	printf("%c\n", *ps);
//	printf("%c\n", *(ps+1));//加一打印出f;注意是地址加一，不是解引用加一
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	char str1[] = "hello bit.";
//	char str2[] = "hello bit.";
//	const char* str3 = "hello bit.";
//	const char* str4 = "hello bit.";
//	if (str1 == str2)//两个数组变量，地址不一样
//		printf("str1 and str2 are same\n");
//	else
//		printf("str1 and str2 are not same\n");
//	if (str3 == str4)//都是指向一个字符串（内存不会生成两个一样的字符串在内存中），
//		             // str3和str4都是地址且地址一致
//		printf("str3 and str4 are same\n");
//	else
//		printf("str3 and str4 are not same\n");
//	return 0;
//}

//                字符串比较
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char i[] = "djfds";
//	char t[] = "djfds";
//	if (strcmp(i, t)==0)//如果相等返回值为0，只能用于字符数组类型字符串不能用于字符串（char t = "djfds";）
//	{
//		printf("相等");
//	}
//	return 0;
//}
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char i = 'a';
//	char t = 'a';
//	if (strcmp(i, t) == 0)//不行对比不了
//	{
//		printf("相等");
//	}
//	return 0;
//}
