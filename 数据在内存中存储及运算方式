#define _CRT_SECURE_NO_WARNINGS 1
//#include<stdio.h>
//int main()
//{
//	unsigned char a = 200;
//	unsigned char b = 100;
//	unsigned char c = 0;
//	c = a + b;
//	printf(" %d %d", a + b, c);
//	return 0;
//}

//                    void的使用
//#include<stdio.h>
//void tese()//无返回值函数
//{
//	;
//}
////int main()
////{
////	int a = 9999999;
////	void* p = &a;//无类型指针，任何类型地址都可以放进去
////	//p++;//无类型指针不能加加
////	//*p = 0;//也不能解引用,        只能用于地址的存储中转
////	char* i = p; //用char类型接收int会发生截断
////	tese();
////	printf("%d", *i);
////	return 0;
////}
//
//int main()
//{
//	int a = 9999999;
//	void* p = &a;//无类型指针，任何类型地址都可以放进去
//	int* y = p; //void*只能用于地址的存储中转
//	*y = 20;
//	printf("%d", *y);
//	return 0;
//}
// 

////               整数在内存中的存储
//#include<stdio.h>
//int main()
//{
//	int i = 9;
//  //9的源码 00000000 00000000 00000000 00001001//正数原反码相同
//	int a = -10;
//	//10的源码 10000000 00000000 00000000 00001010
//	//  反码   11111111 11111111 11111111 11110101  反码等于符号位不变其他位取反
//	//  补码   11111111 11111111 11111111 11110110  补码等于反码加一 
//	int b = i + a;//计算机输出的是源码转换出来的数，但内部计算是用补码运算
//
// b= //9的源码 00000000 00000000 00000000 00001001//正数原反码相同
//	//-10补码   11111111 11111111 11111111 11110110  补码等于反码加一 
//	//相加      11111111111111111111111111111111111 9+10的补码，看符号位是负数需要转换成源码
//	//          11111111111111111111111111111111110 补码转反码得减一
//	//          10000000000000000000000000000000001 反码转原码，符号位不变其他位取反
//    //           符号位是负数，值是1 所以等于-1
//	printf("%d", b);
//	return 0 ;
//}

//#include<stdio.h>
//int main()
//{
//	int i = 0x12345678;
//	return 0;
//}

//                     判断大小端存储

//#include<stdio.h>
//int main()
//{
//	if ( xd() )
//		printf("小端");
//	else
//		printf("大端");
//	return 0;
//}
//int xd()
//{
//	int i = 1;//0x00 00 00 01
//	char* a = (char*)&i;
//	return *a;
//}
//		char类型或者各种长度小于int长度的整型值，都要转换为int类型的整型，
//			然后执行运算，进行截断，在进行最后的处理。
//#include<stdio.h>
//int main()
//{
//	char a = -1;
//	//-1的原码 10000000 00000000 00000000 00000001   
//	//-1的反码 11111111 11111111 11111111 11111110
//	//-1的补码 11111111 11111111 11111111 11111111    反码加一
//	//截断后存入char:  11111111  补码
//// %d打印要整形提升  11111111 11111111 11111111 11111111  补码//有符号符号位为1，就填充1否则0
//	// 反码          11111111 11111111 11111111 11111110
//	//原             10000000 00000000 00000000 00000001  还是-1；
//	unsigned char b = -1;
//	//-1的原码 10000000 00000000 00000000 00000001   
//	//-1的反码 11111111 11111111 11111111 11111110
//	//-1的补码 11111111 11111111 11111111 11111111    反码加一
//	//截断后存入char:  11111111  补码
//	// %d打印要整形提升  00000000 00000000 00000000 11111111  无符号直接补零
//	  //反码             00000000 00000000 00000000 11111110   255
//	  //%d打印是有符号，看到符号位为0，那他认位是正数原,反,补相同直接打印
//	signed char c = -1;
//	//原 10000001
//	//反码 11111110
//	//补码 11111111
//	//整形提升11111111 11111111 11111111 11111111 
//	//减一反  11111111 11111111 11111111 11111110
//	//原，截断                           1000001
//	printf("%d %d %d", a, b, c);
//	return 0;
//}


/////////////////////////////////////////////////////////////////////////////////////////

//#include<stdio.h>
//int main()
//{
//	unsigned char a = 200;//
//	// 原00000000 00000000 00000000 11001000
//	// 反01111111 11111111 11111111 00110111
//	// 补01111111 11111111 11111111 00111000
//	//截断放入a                     00111000
//	//								
//	unsigned char b = 100;
//	// 原00000000 00000000 00000000 01100100
//	// 反01111111 11111111 11111111 10011011
//	// 补01111111 11111111 11111111 10011100
//	//截断放入b                     10011100
//	  // 00000000 00000000 00000000 10011100 整形提升补加
//	  // 00000000 00000000 00000000 00111000加
//	//	 00000000 00000000 00000000 11010100 补
//	//   00000000 00000000 00000000 11010011 反
//	//   01111111 11111111 11111111 00101100 源
//	// 截断放入c 01100100
//	unsigned char c = 0;
//	c = a + b;
//	printf("%d %d", a + b, c);
//	return 0;
//}
//#include<stdio.h>
//int main()
//{
//    char a[1000] = { 0 };
//    int i = 0;
//    for (i = 0; i < 1000; i++)
//    {
//        a[i] = -1 - i;
//    }
//    printf("%d", strlen(a));//255
//    return 0;
//}

#include<stdio.h>
int main()
{
	char i = 128;//10000000 
	//原 00000000 00000000 00000000 10000000 
	//截断放入 i   10000000 
	//整形提升
	printf("%u", i);
	return 0;
}
