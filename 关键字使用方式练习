#define _CRT_SECURE_NO_WARNINGS 1

//#include<stdio.h>
//int main()
//{
//    char  arr;
//    while (scanf("%c\n", &arr) == 1)
//    {
//        if ((arr >= 'A' && arr <= 'Z') || (arr >= 'a' && arr <= 'z'))
//        {
//            printf("%c is an alphabet.\n", arr);
//        }
//        else
//        {
//            printf("%c is not an alphabet.\n", arr);
//        }
//    
//    }
//    return 0;
//}

//        strcpy练习

//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char arr[] = "hdsfsdiof";
//	char arr1[50] = { 0 };
//	strcpy(arr1, arr);
//	strcpy(arr, "zhugebin");
//	printf("%s\n%s\n", arr1,arr);
//	return 0;
//}

//                  用函数模拟实现strcpy的功能
//#include<stdio.h>
//char m_strcpy(char* p, char* p1);
//int main()
//{
//	char arr[] = "sajsa  kf";
//	char arr1[50] = { 0 };
//	m_strcpy(arr, arr1);
//	printf("%s\n", arr1);
//	return 0;
//}
//char m_strcpy(char* p, char* p1)
//{
//	while (*p1++ = *p++)//方式3
//	{                   //最后一个值赋值为\0,while判断\0(ASCII值为0)为假结束循环
//		;
//	}
//	//while (*p != '\0')//方式2
//	//{
//	//	*p1++ = *p++;
//	//}
//	//*p1 = '\0';
//	//while (*p!= '\0')//方式1
//	//{
//	//	*p1 = *p;
//	//	p1++;
//	//	p++;
//	//}
//	//*p1='\0';
//	return *p;
//}

//              strcpy常见问题预防

//                     assert空指针判断
//#include<stdio.h>
//#include<assert.h>
//void m_strcpy(char* p, char* p1);
//int main()
//{
//	char arr[] = "fjkdsj";
//	char arr1[100] = { 0 };
//	char* arr2 = NULL;
//	m_strcpy(arr2, arr1);
//	printf("%s\n", arr1);
//	return 0;
//}
//void m_strcpy(char* p, char* p1)
//{
//	assert(p != NULL);//当p为空指针，assert会终止程序，并指出具体空指针；
//	while (*p1++ = *p++)
//	{
//		;
//	}
//}

//                 const的使用
//#include<stdio.h>
//int main()
//{
//	const int nem = 10;
//	nem = 12;//加了const后不能通过nem改，会报错；
//	printf("%d", nem);
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	const int nem = 10;
//	//nem = 12;//    加了const后不能通过nem改，会报错；
//	int* p = &nem;
//	*p = 20;//       但还可以通过指针来改
//	printf("%d", nem);//说明const只是语法限制
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int b = 33;
//	const int* p = &a;
//	//*p = 100;//不能改
//	p = &b;//   p(地址)可以改
//	printf("%d", *p);
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int b = 33;
//	 int* const p = &a;
//	//p = &b;//   //不能改
//	 *p = 50;
//	printf("%d", *p);
//	return 0;
//}
//#include<stdio.h>
//#include<assert.h>
//void m_strcpy(char* p, char* p1);
//int main()
//{
//	char arr[] = "fjkdsj";
//	char arr1[100] = { 0 };
//	char* arr2 = NULL;
//	m_strcpy(arr2, arr1);
//	printf("%s\n", arr1);
//	return 0;
//}
//void m_strcpy(const char* p, char* p1)//const修饰
//{
//	assert(p != NULL);//当p为空指针，assert会终止程序，并指出具体空指针；
//	while (*p1++ = *p++)
//	{
//		;
//	}
//}

//               模拟实现strlen

//#include<stdio.h>
//int my_strlen(char* p);
//int main()
//{
//	char arr[] = "fjds";
//	int a =	my_strlen(arr);
//	printf("%d\n", a);
//}
//int my_strlen(char* p)
//{
//	int a = 0;
//	while (*p)
//	{
//		a++;
//		p++;
//	}
//	return a;
//}

///                           判断一个数是否为有序数列
//#include<stdio.h>
//int ss(int* p, int x);
//int main()
//{
//    int a = 0;//N
//    int i = 0;//循环辅助
//    scanf("%d", &a);
//    int arr[50] = { 0 };
//    if (a < 3)//数必须3≤N≤50
//    {
//        a = 3;
//    }
//    for (i = 0; i < a; i++)
//    {
//        scanf("%d", &arr[i]);
//    }
//    int e = ss(arr, a);
//    if (e == 1)
//    {
//        printf("%s", "unsorted");//否
//        return 0;
//    }
//    printf("%s", "sorted");
//    return 0;
//}
//
//int ss(int* p, int x)
//{
//    int i = 0;
//    if (*p > *(p + 1))
//    {
//        for (i = 0; i < x - 1; i++)
//        {
//            if (*p < *(p + 1))
//                return 1;
//            p++;
//        }
//        return 0;
//    }
//
//    if (*p < *(p + 1))
//    {
//        for (i = 0; i < x - 1; i++)
//        {
//            if (*p > *(p + 1))
//                return 1;
//            p++;
//        }
//        return 0;
//    }
//
//    if (*p = *(p + 1))
//    {
//        for (i = 0; i < x - 1; i++)
//        {
//            if (*p != *(p + 1))
//                return 1;
//            p++;
//        }
//        return 0;
//    }
//
//}
//                         升序序列排列合并
//#include<stdio.h>
//void scan(int* p, int x);
//void add(int* p, int* p1, int x, int y);
//int main()
//{
//    int n = 0;
//    int m = 0;
//    int i = 0;
//    int arr[1000];
//    int arr1[30000];
//    scanf("%d %d", &n, &m);
//    scan(arr, n);
//    scan(arr1, m);
//    add(arr, arr1, n, m);
//    return 0;
//}
//void scan(int p[], int x)//输入
//{
//    int i = 0;
//    for (i = 0; i < x; i++)
//    {
//        scanf("%d", &p[i]);
//    }
//}
//
//void add(int* p, int* p1, int x, int y)//合并并打印
//{
//    int i = 0;
//    int b = x + y;
//    for (i = 0; i < y; i++)
//    {
//        *(p + i + x) = *(p1 + i);
//    }
//
//    for (i = 0; i < b - 1; i++)
//    {
//        int k = 0;
//        for (k = 0; k < b - 1; k++)
//        {
//            if (*(p + k) > *(p + k + 1))
//            {
//                int r = *(p + k);
//                *(p + k) = *(p + k + 1);
//                *(p + k + 1) = r;
//            }
//        }
//    }
//    for (i = 0; i < b; i++)
//    {
//        printf("%d ", *(p + i));
//    }
//}


//    打印测试

//#include<stdio.h>
//void scsn(int* p, int x);
//int main()
//{
//	int arr[99];
//	int i = 0;
//	int a = 0;
//	scanf("%d", &a);
//	scsn(arr, a);
//	for (i = 0; i < a; i++)
//	{
//		printf("%d", arr[i]);
//	}
//	return 0;
//}
//void scsn(int* p, int x)
//{
//	int i = 0;
//	for (i = 0; i < x; i++)
//	{
//		scanf("%d",  p);//p存的是地址应输入值给他，*p只能赋值不能输入;
//		p++;
//	}
//}

//                    输出用“* ”组成的X形图案
#include<stdio.h>
int main()
{
    int i = 0;
    while (scanf("%d", &i) != EOF)
    {
        int a = 0;
        for (a = 0; a < i; a++)//行
        {
            int b = 0;
            for (b = 0; b < i; b++)//列
            {
                if (a == b || b == i - a - 1)
                {
                    printf("*");
                }
                else
                    printf(" ");
            }
            printf("\n");
        }
    }
    return 0;
}
