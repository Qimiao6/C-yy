#define _CRT_SECURE_NO_WARNINGS 1
//#include<stdio.h>
//int main()
//{
//	int a = 3;
//	int b = 5;
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("a = %d b = %d", a, b);
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	int a, b, c;
//	a = 5;
//	c = ++a;
//	b = ++c, c++, ++a, a++;
//	b += a++ + c;
//	printf("a = %d b = %d c = %d\n:", a, b, c);
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	int a = 5;
//	int b = 8;
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("%d %d", a, b);
//	return 0;
//}
//                            统计二进制中1的个数


//#include<stdio.h>
//int Hamming_weight_1(int n)
//{
//    int count_ = 0; 
//
//    while (n != 0)  
//    {
//        if (n % 2 == 1) 
//            count_++;
//        n /= 2;        
//    }
//    return count_;
//}
//int main()
//{
//    int n;
//    scanf("%d", &n);
//    int i = Hamming_weight_1(n);
//    printf("有%d个1\n", i);
//    return 0;
//
//}

//#include<stdio.h>
//int cala_diff_bit(int m, int n)//指针变量做函数参数
//{
//	int tmp = m ^ n;
//	int count = 0;
//	while (tmp)
//	{
//		tmp = tmp & (tmp - 1);
//		count++;
//	}
//	return count;
//}
//int main()
//{
//	int m, n;
//	printf("输入两个整数：");
//	scanf(" %d %d", &m, &n);
//	int ret =  cala_diff_bit(m, n);
//	printf("ret = % d\n", ret);
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//    int i = 1;
//    int ret = (++i) + (++i) + (++i);
//    printf("ret = %d\n", ret);
//    return 0;
//}
 /*
#include <stdio.h>
int i;*/
//int main()
//{
//    i--;
//    if (i > sizeof(i))
//    {
//        printf(">\n");
//    }
//    else
//    {
//        printf("<\n");
//    }
//    return 0;
//}
//                   粗暴求二进制中1的数量
//#include<stdio.h>
//int arr(int x)
//{
//	int cc = 0;//1的数量
//	while (x != 0)
//	{
//		if (x % 2 == 1)
//		{
//			cc++;
//		}
//		x /= 2;
//	}
//	return cc;
//}
//int main()
//{
//	int i = 0;
//	scanf("%d", &i);
//	int yy = arr(i);
//	printf("%d\n", yy);
//	return 0;
//}

//                 按位求二进制中
#include<stdio.h>
int arr(int x);
int main()
{
	int i = 0;
	while (scanf("%d", &i) != EOF)
	{
		int yy = arr(i);
		printf("%d\n", yy);
	}
	return 0;
	}
int arr(int x)
{
	int cc = 0;//1的个数
	while (x != 0)
	{
		cc += x & 1;
		x >>= 1;
	}
	return cc;
}                  //只能计算正数
