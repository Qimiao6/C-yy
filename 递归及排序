#define _CRT_SECURE_NO_WARNINGS 1
////创建一个整形数组，完成对数组的操作
////实现函数init() 初始化数组为全0
////实现print()  打印数组的每个元素
////实现reverse()  函数完成数组元素的逆置。
////要求：自己设计以上函数的参数，返回值。
//void init(int arr[], int sz);
//void print(int arr[], int sz);
//void reverse(int rr[], int ww);
//#include <stdio.h>
//int main()
//{
//	int yy = 0;//数组输入循环
//	int arr[] = { 1,2,3,4,5,6,7,8,9};
//	int sz = sizeof(arr) / sizeof(arr[1])-1;
//	init(arr,sz);//初始化为0
//	for (yy = 0; yy <= sz; yy++)//输入数组参数
//	{
//		scanf("%d", &arr[yy]);
//	}
//	print(arr,sz);//打印输入后数组元素
//	reverse(arr, sz);//逆置数组
//	printf("逆置后参数后打印\n");
//	int d = 0;
//	for (d = 0; d <= sz; d++)
//	{
//		printf("arr[%d] = %d\n", d, arr[d]);
//	}
//	return 0;
//
//	}
//void init(int arr[],int sz)
//{
//	int i  = 0;
//	for (i = 0; i <= sz; i++)
//	{
//		arr[i] = 0;
//	}
//	printf("初始化后参数后打印\n");
//	int d = 0;
//	for (d = 0; d <= sz; d++)
//	{
//		printf("arr[%d] = %d\n", d, arr[d]);
//	}
//	
//}
//void print(int arr[], int sz)
//{
//	printf("输入参数后打印\n");
//	int i = 0;
//	for (i = 0; i <= sz; i++)
//	{
//		printf("arr[%d] = %d\n",i , arr[i]);
//	}
//
//}
//void reverse(int rr[], int ww)//3
//{
//	int uu = 0;
//	for (uu=0;uu<ww;uu++)
//	{
//		int ee = rr[uu];
//		rr[uu] = rr[ww];
//		rr[ww] = ee;
//		ww--;
//	}
//}
//                  创建一个二维函数
//               输入值并计算大于0的数之和


//编写一个函数实现n的k次方，使用递归实现。
//#include<stdio.h>
//int cf(int x, int y);
//int main()
//{
//	int n = 2;
//	int k = 2;
//	printf("请输入一个数及他的次方\n");
//	scanf("%d %d", &n, &k);
//	cf(n, k);
//	int pp = cf(n , k);
//	printf("%d", pp);
//	return 0;
//	}
//int cf(int x, int y)
//{
//	int r = 0;//商
//	if (y > 1)
//	{
//		return r = x * cf(x, y - 1);
//	}
//	else
//	{
//		return x;
//	}
//}

//            调用DigitSum(1729)，则应该返回1+7+2+9，它的和是19

 //                           输入：1729，输出：19
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	scanf("%d", &i);
//	int yy = DigitSum(i);
//	printf("%d",yy);
//	return 0;
//}
//int DigitSum(int x)
//{
//	if (x >= 10)
//	{
//		return  x % 10 + DigitSum(x / 10);
//	}
//	else
//	{
//		return x;
//	}	
//}

//               递归方式将字符逆序
//#include<stdio.h>
//void reverse_string(char* str)
//{
//	if (*str != '\0')
//	{
//		char tmp = *str;
//		int length = strlen(str);
//		*str = *(str + length - 1);
//		*(str + length - 1) = '\0';
//		reverse_string(str + 1);
//		*(str + length - 1) = tmp;
//	}
//
//}
//int main()
//{
//	char arr[] = "abcdef";
//	reverse_string(arr);
//	printf("%s\n", arr);
//	return 0;
//}
//               递归和非递归实现strlen


//非递归

//#include <stdio.h>
//int main()
//{
//	char arr[] = { "abcdefg" };
//	//char arr = 'w';
//	//printf("%c", arr);
//	//printf("\n%d", sizeof(char));
//	printf("%d", strlen(arr));
//	return 0;
//	}

 //                        递归方式
//
//#include<stdio.h>
//int str(char arr[]);
//int main()
//{
//	char arr[] = { "abcdefg" };
//	int yy = str(arr);
//	printf("%d", yy);
//	return 0;
//}
//int str(char arr[])
//{
//	if (arr[0] == '\0')
//	{
//		return 0;
//		
//	}
//	return 1 + str(arr+1);
//}
//
//#include<stdio.h>
//int main()
//{
//    printf("%d", 0xB);
//    return 0;
//}

//                     输入100以内的数
//#include<stdio.h>
//int main()
//{
//    int i, u, y;
//    scanf("%d %d %d", &i,&u, &y);
//    printf("score1=%d,score2=%d,score3=%d", i%101 , u % 101, y % 101);
//    return 0;
//}

///                   输出对应ascll码值
#include<stdio.h>
int main()
{
    int arr[] = { 73, 32, 99, 97, 110, 32, 100, 111, 32, 105, 116 , 33 };
    int i = sizeof(arr) / sizeof(arr[0]) - 1;
    int yy = 0;
    for (yy = 0; yy <= i; yy++)
    {
        printf("%c", arr[yy]);
    }
    return 0;
}
