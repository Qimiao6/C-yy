#define _CRT_SECURE_NO_WARNINGS 1
////                         打印二维数组所有元素
//#include<stdio.h>
//int main()
//{
//	int arr[3][4] = { {1,2,3,4,},{1,2,3},{1,2,3} };
//	int i = 0;//3行
//	for (i = 0; i <= 2; i++)
//	{
//		int y = 0;//4列
//		while (y <= 3)
//		{
//			printf("%d", arr[i][y]);
//			y++;
//		}
//		printf("\n");
//	}
//	return 0;
//	}

////                         打印二维数组所有地址
//#include<stdio.h>
//int main()
//{
//	int arr[3][4] = { {1,2,3},{1,2,3,4},{1} };
//	int i = 0;
//	while (i < 3)
//	{
//		int y = 0;
//		for (y = 0; y < 4; y++)
//		{
//			printf("arr[%d][%d]=%p\n", i, y, &arr[i][y]);
//		}//结论得出虽然分行列，但是地址是连续的
//		i++;
//	}
//	return 0;
//	}、

//                            数组越界访问
//#include<stdio.h>
//int main()
//{
//	int arr[3][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };
//	int i = 0;
//	while (i < 3)
//	{
//		int y = 0;
//		for (y = 0; y < 5; y++)
//		{
//			printf("arr[%d][%d]=%d\n", i, y, arr[i][y]);
//		}//结论得出越界访问会得到随机数，也可能得到下一行或列的数
//		//间接证明数组元素地址在内存中是按顺序存放的
//		i++;
//	}
//	return 0;
//	}
//                                    冒泡排序（自己编的）
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[1])-1;//右下标
//	int i = 0;
//	int w = 0;
//	for (w = 0; w < 10; w++)
//	{
//		int mm = 0;
//		i = 0;
//		while (mm < sz)
//		{
//			if (arr[i] < arr[i + 1])
//			{
//				int e = arr[i];
//				arr[i] = arr[i + 1];
//				arr[i + 1] = e;
//				
//			}
//			i++;//每次下标加一
//			mm++;//循环辅助
//		}
//	}
//	int k = 0;
//	for (k = 0; k < 10; k++)
//	{
//		printf("arr[%d]=%d\n", k,arr[k]);
//	}
	//
	//return 0;
	//}


//                              冒泡排序（大佬编的）

//#include<stdio.h>
//void bubble(int arr[10],int sz)//数组传参传过来的是数组首元素地址
//{
//	//int sz = sizeof(arr) / sizeof(arr[1]);//指针变量除4还是等于一不能用这个
//	int i = 0;
//	for (i = 0; i < sz - 1; i++)
//	{
//		int j = 0;
//		for (j = 0; j < sz - 1; j++)
//		{
//			int e = arr[j];
//			arr[j] = arr[j + 1];
//			arr[j + 1] = e;
//		}
//	}
//
//}
//
//int main()
//{
//	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
//	int sz = sizeof(arr) / sizeof(arr[1]);
//	bubble(arr,sz);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d", arr[i]);
//	}
//	return 0;
//}

//              数组地址探讨
//
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9 };
//	int* p = arr;
//	printf("%p\n", p);
//	printf("%p\n", &arr[0]);
//	printf("%p\n", arr);//上述打印地址均一致都是数组首元素地址
//	printf("%p\n", p + 1);
//	printf("%p\n", &arr[0 + 1]);
//	printf("%p\n", arr + 1);//上述打印地址均一致打印的均是数组第二个元素的地址
//	}

//                  用指针打印数组元素
//#include<stdio.h>
//int main()
//{
//	int yy[10] = { 1,2,3,4,5,6,7,8,9 };
//	int* p = yy;
//	int sz = sizeof(yy) / sizeof(yy[1]);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		//printf("%p = %p\n", p + i,&yy[i]);//指针和数组一致
//		//printf("%p = %p\n", &p[i], &yy[i]);//指针和数组一致
//		printf("%d = %d\n", *p+i,yy[i]);//指针和数组一致
//
//	}
//		
//}

//#include <stdio.h>
//int main()
//{
//    int arr[] = { (1,2,3,4,5) };
//    printf("%d\n", sizeof(arr));//4
//    return 0;
//}

//#include <stdio.h>
//int main()
//{
//    char str[] = "hello bit";
//    printf("%d %d\n", sizeof(str), strlen(str));//会算出10和9，sizeof会算\0，strlen则不会
//    return 0;
//}
//#include <stdio.h>
/*
int main()
{
    int n = 0;
    long long sum = 0;

    scanf("%d", &n);
    int i = 0;

    for(i=1; i<=n; i++)
    {
        sum += i;
    }

    printf("%lld\n", sum);

    return 0;
}
*/

//#include<stdio.h>
//int main()
//{
//    long long n = 0;
//    long long yy = 0;
//
//    scanf("%lld", &n);
//    int i = 0;
//    yy = (1 + n) * n / 2;
//
//    printf("%lld\n", yy);
//
//    return 0;
//}

//                        斐波那契数
//#include<stdio.h>
//#include<windows.h>
//int fib(int n)
//{
//	if (n == 1 || n == 2) {
//		return 1;
//	}
//	return fib(n - 1) + fib(n - 2);
//}
//void main()
//{
//	int n = 0;
//	printf("请输入您要得到第几位斐波那契数 > ");
//	scanf_s("%d", &n);
//	int f = fib(n);
//	printf("第%d位斐波那契数是%d\n", n, f);
//	system("pause");
//}


//                   非递归

//#include<stdio.h>
//#include<windows.h>
//int fib(int n)
//{
//	int fib1 = 1;
//	int fib2 = 1;
//	int fibn = 1;
//	if (n == 1 || n == 2) {
//		printf("第%d位斐波那契数是1！\n", n);
//	}
//	else {
//		printf("第%d位斐波那契数是", n);
//		while (n > 2) {
//			fibn = fib1 + fib2;
//			fib2 = fib1;
//			fib1 = fibn;
//			n--;
//		}
//		printf("%d！\n", fibn);
//	}
//}
//void main()
//{
//	int n = 0;
//	printf("输入要得到第几位斐波那契数 > ");
//	scanf_s("%d", &n);
//	fib(n);
//	system("pause");
//}

//编写一个函数 reverse_string(char* string)（递归实现）
//实现：将参数字符串中的字符反向排列，不是逆序打印。
//要求：不能使用C函数库中的字符串操作函数。
//比如 :
//char arr[] = "abcdef";
//逆序之后数组的内容变成：fedcba

//递归实现字符串逆序
//void reverse_string(char* str)
//{
//	if (*str != '\0')
//	{
//		char tmp = *str;
//		int length = strlen(str);
//		*str = *(str + length - 1);
//		*(str + length - 1) = '\0';
//		reverse_string(str + 1);
//		*(str + length - 1) = tmp;
//	}
//
//}
//int main()
//{
//	char arr[] = "abcdef";
//	reverse_string(arr);
//	printf("%s\n", arr);
//	return 0;
//}

//将数组A中的内容和数组B中的内容进行交换。（数组一样大）

//#include<stdio.h>
//int main()
//{
//    int arr1[10] = { 1,2,3,4,5,6,7,8,9,0 };
//    int arr2[10] = { 0,9,8,7,6,5,4,3,2,1 };
//    int i = 0;
//    for (i = 0; i < sizeof(arr1) / sizeof(arr1[0]); i++)
//    {
//        int tmp = arr1[i];
//        arr1[i] = arr2[i];
//        arr2[i] = tmp;
//    }
//    printf("arr1:");
//    for (i = 0; i < sizeof(arr1) / sizeof(arr1[0]); i++)
//    {
//        printf("%d", arr1[i]);
//    }
//    printf("\narr2:");
//    for (i = 0; i < sizeof(arr1) / sizeof(arr1[0]); i++)
//    {
//        printf("%d", arr2[i]);
//    }
//    printf("\n");
//    
//    return 0;
//}

