#define _CRT_SECURE_NO_WARNINGS 1

/////                        回调函数实现计算器
//#include<stdio.h>
//int add(int x, int y)
//{
//	return x + y;
//}
//int sub(int x, int y)
//{
//	return x - y;
//}
//int mul(int x, int y)
//{
//	return x * y;
//}
//int div(int x, int y)
//{
//	return x / y;
//}
//void clse(int(*pp)(int, int))
//{
//	int a, b;
//	int i = 0;
//	printf("请输入要计算的两个值\n");
//	scanf("%d%d", &a, &b);
//	i = pp(a, b);
//	printf("%d\n", i);
//}
//int main()
//{
//	int i = 0;
//	do
//	{
//		printf("********   0:退出    ********\n");
//		printf("******** 1:加   2:减 ********\n");
//		printf("******** 3:乘   4:除 ********\n");
//		printf("请选择要计算的方式1/2/3/4\n");
//		scanf("%d", &i);
//		switch (i)
//		{
//		case 1:
//			clse(add);
//			break;
//		case 2:
//			clse(sub);
//			break;
//		case 3:
//			clse(mul);
//			break;
//		case 4:
//			clse(div);
//			break;
//		case 0:
//			printf("退出程序\n");
//			break;
//		default:
//			printf("选择错误\n");
//			break;
//		}
//	} while (i);
//	return 0;
//}

//         写一个冒泡函数
#include<stdio.h>
//void maopao(int i[],int sz)
//{
//	int k = 0;
//	for (k = 0; k < sz - 1; k++)
//	{
//		int d = 0;
//		for (d = 0; d < sz - k-1; d++)
//		{
//			if (i[d] > i[d+1])
//			{
//				int y = i[d];
//				i[d] = i[d + 1];
//				i[d + 1] = y;
//			}
//		}
//	}
//}
//void print(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz ; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//}
//int main()
//{
//	int i[10] = {1,2,3,4,5,6,7,8,9,2};
//	int sz = sizeof(i) / sizeof(i[0]);
//	maopao(i , sz);
//	print(i, sz);
//	return 0;
//}


//                  空指针的使用
//
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	void* p = &i;
//	//*p = 0;//空指针不能解引用
//	*(int*)p = 2;//要想使用只能强制类型转换
//	printf("%d", i);
//	return 0;
//}

//                      qsort的使用
#include<stdlib.h>
#include<string.h>

//int paixu(const void* p1, const void* p2)
//{
//	if (*(int*)p1 > *(int*)p2)
//		return 1;//返回1，p1,p2需要跟换（指向的元素位于 指向的元素之后p1p2）
//	else if (*(int*)p1 == *(int*)p2)
//		return 0;//返回0相等不换
//	else
//		return -1;////返回-1不换
//}
#include<stdio.h>
//int paixu(const void* p1, const void* p2)//比上面的简便， 升序
//{
//	return (*(int*)p1 - *(int*)p2);
//	
//}
//int paixu(const void* p1, const void* p2)// 降序
//{
//	return (*(int*)p2 - *(int*)p1);
//
//}

//struct se
//{
//	char name[30];
//	int age;
//};
////int cmp_name(const void* e1, const void* e2)//比较名字
////{
////	return strcmp(((struct se*)e1)->name, ((struct se*)e2)->name);
////}
//int cmp_age(const void* d1, const void* d2)// 比年龄
//{
//	return (((struct se*)d1)->age) - (((struct se*)d2)->age);
//}
//void test3()
//{
//	struct se tt[3] = { {"zhangsan",35},{"lisi",18},{"wangwu",233} };
//	int sz = sizeof(tt) / sizeof(tt[0]);
//	//qsort(tt,sz, sizeof(tt[0]),cmp_name);
//	qsort(tt, sz, sizeof(tt[0]), cmp_age);
//
//}
//              冒泡排序模拟实现qsort
int cmp_int(const void* e1, const void* e2)
{
	return (*(int*)e1 - *(int*)e2);
}

void Swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}

void bubble_sort2(void* base, int sz, int width, int (*cmp)(const void* e1, const void* e2))
{
	int i = 0;
	//趟数
	for (i = 0; i < sz - 1; i++)
	{
		//一趟冒泡排序的过程
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (cmp((char*)base + j * width, (char*)base + (j + 1) * width) > 0)
			{
				//交换
				Swap((char*)base + j * width, (char*)base + (j + 1) * width, width);
			}
		}
	}
}
void print(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}
void test4()
{
	int i[10] = { 9,2,3,6,5,4,7,8,1,2 };
	int sz = sizeof(i) / sizeof(i[0]);
	bubble_sort2(i, sz, sizeof(i[0]), cmp_int);
	print(i, sz);
}
int main()
{
	//int arr[10] = { 4,6,8,1,2,3,5,7,9,1 };
	//int sz = sizeof(arr) / sizeof(arr[0]);
	//qsort(arr, sz, sizeof(arr[1]), paixu);
	//print(arr, sz);
	//test3();
	test4();
	return 0;
}
