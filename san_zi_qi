game.h


#pragma once
#define ROW 3
#define COL 3 
#include<stdlib.h>
#include<time.h>
#include<stdio.h>
void InitBoard(char board[ROW][COL], int row, int col);//初始化棋盘
//打印棋盘
void display_board(char board[ROW][COL],int row ,int col);
//操作棋盘
void player_move(char board[ROW][COL], int row, int col);
void computer_move(char board[ROW][COL], int row, int col);
char is_win(char board[ROW][COL], int row, int col);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

geme.c

#define _CRT_SECURE_NO_WARNINGS 1
#include "game.h"
void InitBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
		 board[i][j] = ' ';
		}
	}
}
void display_board(char board[ROW][COL], int row, int col)
{
	int i = 0;
		for(i = 0; i < row; i++)
		{
			int j = 0;
			for(j = 0; j < col; j++)
			{
				printf(" %c ", board[i][j]);
				if (j < col - 1)
				printf("|");
			}
			printf("\n");
			if (i < row - 1)
			{
				for (j = 0; j < col; j++)
				{
					//printf("---|---|---\n");
					printf("---");
					if (j < col - 1)
						printf("|");
				}
				printf("\n");
			}	
		}
}
void player_move(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家下棋>:\n");
	while (1)
	{
		printf("请输入要下棋的坐标>:");
		scanf("%d %d", &x, &y);
		//要判断输入坐标是否合法
		//并判断是否被占用
		if (x >= 1 && x <= row &&y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该位置被占用");
			}

		}
		else
		{
			printf("坐标非法请重新输入");
		}

	}
}
//电脑下棋
void computer_move(char board[ROW][COL], int row, int col)
{
	printf("电脑下棋>:\n");
	int x = rand() % row;
	int y = rand() % col;
	while(1)
	{
		int x = rand() % row;
		int y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}
//如果棋盘满了返回1
//不满返回0
static int is_full(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			if (' ' == board[i][j])
			{
				return 0;
			}
		}
	}
	return 1;
}
char is_win(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][2] == board[i][1] && board[i][0] != ' ')
		{
			return board[i][0];
		}
	}
	for (i = 0; i < col; i++)
	{
		if (board[0][i] == board[1][i] && board[2][i] == board[1][i] && board[0][i] != ' ')
		{
			return board[0][i];
		}
	}
	if (board[1][1] == board[2][2] && board[0][0] == board[1][1] && board[0][0] != ' ')
	{
		return board[1][1];
	}
	if (board[0][2] == board[1][1] && board[2][0] == board[1][1] && board[0][2] != ' ')
	{
		return board[1][1];
	}
	if (is_full(board, row,col) == 1)
	{
		return 'Q';
	}
	return 'C';
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

test.c


#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include"game.h"
void menu();
void geme()
{
	char ret = 0;
	printf("欢迎来到大冰箱的三子棋游戏\n");
	char board[ROW][COL] = {0};
	InitBoard(board, ROW, COL);//初始化棋盘
	display_board(board, ROW, COL);//打印棋盘
	while (1)
	{
		
		player_move(board, ROW, COL);
		display_board(board, ROW, COL);//打印棋盘
		char ret = is_win(board, ROW, COL);// 结果检测
		if (ret != 'C')
		{
			if (ret == '*')
			{
				printf("玩家赢\n");
			}
			else if (ret == '#')
			{
				printf("电脑赢\n");
			}
			else if (ret == 'Q')
			{
				printf("平局\n");
			}
			break;
		}
		computer_move(board, ROW, COL);
		display_board(board, ROW, COL);
		ret = is_win(board, ROW, COL);// 结果检测
		if (ret != 'C')
		{
			if (ret == '*')
			{
				printf("玩家赢\n");
			}
			else if (ret == '#')
			{
				printf("电脑赢\n");
			}
			else if (ret == 'Q')
			{
				printf("平局\n");
			}
			break;
		}
			
	
	//玩家赢返回"*"
	//电脑赢返回“#”
	//平局了返回“Q”
	//游戏继续返回“C”
	}
	
}
int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("是否玩游戏1/0\n");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			geme();
			break;
		case 0:
			break;
		default:
			printf("输入错误\n");
			break;
		}
	} while (input);
	return 0;
}
void menu()
{
	printf("& & & & & & & & & & & & & & & &\n");
	printf("\n& & & &    来了小冰棒   & & & &\n");
	printf("\n& & & & & & & & & & & & & & & &\n");

}
