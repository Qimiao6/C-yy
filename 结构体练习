#define _CRT_SECURE_NO_WARNINGS 1
//写一个函数打印arr数组的内容，不使用数组下标，使用指针。
//
//arr是一个整形一维数组。
//
//#include<stdio.h>
//int main()
//{
//	int i[8] = {0,1,2,3,4,5,6,7};
//	int* pp = &i;
//	int ii = 0;
//	for (ii = 0; ii < 8; ii++)
//	{
//		printf("%d ", *(pp + ii));
//
//	}
//	return 0;
//}


//            数组
//#include<stdio.h>
//int main()
//{
//	char i[256] = {0};
//	scanf("%s", &i);
//	printf("%s", i);
//	return 0;
//}
//                        逆序数组
//#include "stdio.h"
//#include "string.h"

//int main(void)
//{
//    char str1[100];
//    char str2[100];
//    int a, i;
//    gets(str1);
//    //scanf("%s", str1);
//    a = strlen(str1);
//    for (i = 0; i < a; i++)
//        str2[i] = str1[a - 1 - i];
//    str2[i] = 0;
//    printf("%s", str2);
//}

//                   gets的使用

/* gets example */
//#include <stdio.h>
//
//int main()
//{
//	char string[256];
//	printf("Insert your full address: ");
//	gets(string);     // warning: unsafe (see fgets instead)
//	printf("Your address is: %s\n", string);
//	return 0;
//}

//            指针的解引用
//#include<stdio.h>
//int main()
//{
//	int a = 10;
//	int* p = &a;//一级指针
//	int** y = &p;//二级指针
//	*p = 15;//一级指针用法
//	**y = 20;//二级指针用法
//	printf("%d\n", a);
//	return 0;
//}

//             用指针数组打印所指向元素的值
//#include<stdio.h>
//int main()
//{
//	int a = 11;
//	int b = 12;
//	int c = 13;
//	int d = 14;
//	int n = 14;
//	int* arr[] = { &a ,&b , &c , &d, &n };
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%d\n", *(arr[i]));
//	}
//	return 0;
//}

//                 用一维数组模拟二维数组，并用指针数组打印

//#include<stdio.h>
//int main()
//{
//	int arr[] = { 1,2,3,4,5 };
//	int arr1[] = { 2,3,4,5,6 };
//	int arr2[] = { 3,4,5,6,7 };
//	int arr3[] = { 4,5,6,7,8 };
//	int* pp[] = { arr ,arr1, arr2, arr3 };
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		int y = 0;
//		for (y = 0; y < 5; y++)
//		{
//			//printf("%d ",pp[i][y]);//数组形式    打印整个指针数组
//			printf("%d ", *(*(pp+i)+y));//指针形式  打印整个指针数组
//			//printf("%d ", **pp + i + y);//不加括号也行，但可能会在其他编译器出错
//		}
//		printf("\n");
//	}
//	
//	//printf("%d ", pp[3][1]);//如3位数组，第0位等于4
//
//	return 0;
//}


//       结构体

//#include<stdio.h>
//struct tsg
//{
//	char sm[30];
//	/*int sm;*/
//	int jg;
//};
//
//struct dsf
//{
//	struct tsg p;
//	char xb[99];
//	int nl;
//};
//int main()
//{
//
//	//struct tsg pp = { "机甲战士", 100 };//pp是结构体变量，结构体变量可以有多个
//	//struct tsg gg = { "机甲武士", 75 };
//	//struct tsg ff = { "科技大厦附近",33 };
//	//printf("%s %d\n", pp.sm, pp.jg);
//	//printf("%s %d\n", gg.sm, gg.jg);
//	/*printf("%s %d\n", ff.sm, ff.jg);*/
//	//                                     结构体嵌套使用
//
//	struct dsf kk = { "魔方大厦",1350,"男",33 };
//	printf("%s %d %s %d", kk.p.sm, kk.p.jg, kk.xb, kk.nl);
//	return 0;
//}

//           结构体
//#include<stdio.h>
//struct tushu
//{
//	int pp;
//	float bb;
//};
//int main()
//{
//	struct tushu jj = { .pp = 100,.bb = 2.00};
//	printf("%d %.2f", jj.pp, jj.bb);
//	return 0;
//}
//#include<stdio.h>
//struct s//机构体后面加一个标签名
//{
//	int pp;//这是成员需定义类型和
//	double bb;
//	char i;
//};
//int main()
//{
//	struct s g = { .bb = 0.03415,.pp = 3145110,.i = 'k' };
//	//      g是结构体的标签后面的变量，可以理解为类，可以有很多不同的变量
//	printf("%.6f  , %d , %c", g.bb, g.pp, g.i);
//	return 0;
//}
//                   更改结构体中的值
#include<stdio.h>
#include<string.h>
struct bb 
{
	int pp;
	short gg;
	char mm[333];

};
int main()
{
	struct bb cc = { .pp = 100 , .gg = 400 ,.mm  = "fsdjffdsj"};
	cc.pp = 300;
	strcpy(cc.mm, "诸葛斌");//字符和数组都需要这样修改
	printf("%d %d\n", cc.pp, cc.gg);
	printf("%s", cc.mm);
	return 0;
}
